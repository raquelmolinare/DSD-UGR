#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  i32 suma(i32 num1, i32 num2)')
    print('  i32 resta(i32 num1, i32 num2)')
    print('  double multiplicacion(double num1, double num2)')
    print('  double division(double num1, double num2)')
    print('  double logaritmo(double num1, double num2)')
    print('  double potencia(double num1, i32 num2)')
    print('   sumavectores( v1,  v2)')
    print('   restavectores( v1,  v2)')
    print('  double productoescalar3d(Vector3D v3D1, Vector3D v3D2)')
    print('  Vector3D productovectorial3d(Vector3D v3D1, Vector3D v3D2)')
    print('  Matriz sumamatrices(Matriz m1, Matriz m2)')
    print('  Matriz restamatrices(Matriz m1, Matriz m2)')
    print('  Matriz productomatrices(Matriz m1, Matriz m2)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplicacion':
    if len(args) != 2:
        print('multiplicacion requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplicacion(eval(args[0]), eval(args[1]),))

elif cmd == 'division':
    if len(args) != 2:
        print('division requires 2 args')
        sys.exit(1)
    pp.pprint(client.division(eval(args[0]), eval(args[1]),))

elif cmd == 'logaritmo':
    if len(args) != 2:
        print('logaritmo requires 2 args')
        sys.exit(1)
    pp.pprint(client.logaritmo(eval(args[0]), eval(args[1]),))

elif cmd == 'potencia':
    if len(args) != 2:
        print('potencia requires 2 args')
        sys.exit(1)
    pp.pprint(client.potencia(eval(args[0]), eval(args[1]),))

elif cmd == 'sumavectores':
    if len(args) != 2:
        print('sumavectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.sumavectores(eval(args[0]), eval(args[1]),))

elif cmd == 'restavectores':
    if len(args) != 2:
        print('restavectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.restavectores(eval(args[0]), eval(args[1]),))

elif cmd == 'productoescalar3d':
    if len(args) != 2:
        print('productoescalar3d requires 2 args')
        sys.exit(1)
    pp.pprint(client.productoescalar3d(eval(args[0]), eval(args[1]),))

elif cmd == 'productovectorial3d':
    if len(args) != 2:
        print('productovectorial3d requires 2 args')
        sys.exit(1)
    pp.pprint(client.productovectorial3d(eval(args[0]), eval(args[1]),))

elif cmd == 'sumamatrices':
    if len(args) != 2:
        print('sumamatrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.sumamatrices(eval(args[0]), eval(args[1]),))

elif cmd == 'restamatrices':
    if len(args) != 2:
        print('restamatrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.restamatrices(eval(args[0]), eval(args[1]),))

elif cmd == 'productomatrices':
    if len(args) != 2:
        print('productomatrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.productomatrices(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
